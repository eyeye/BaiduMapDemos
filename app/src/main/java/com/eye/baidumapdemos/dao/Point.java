package com.eye.baidumapdemos.dao;

import com.eye.baidumapdemos.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table POINT.
 */
public class Point {

    private Long id;
    private java.util.Date time;
    private Integer latitude;
    private Integer longtitude;
    private Long routeId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PointDao myDao;

    private Route route;
    private Long route__resolvedKey;


    public Point() {
    }

    public Point(Long id) {
        this.id = id;
    }

    public Point(Long id, java.util.Date time, Integer latitude, Integer longtitude, Long routeId) {
        this.id = id;
        this.time = time;
        this.latitude = latitude;
        this.longtitude = longtitude;
        this.routeId = routeId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPointDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public java.util.Date getTime() {
        return time;
    }

    public void setTime(java.util.Date time) {
        this.time = time;
    }

    public Integer getLatitude() {
        return latitude;
    }

    public void setLatitude(Integer latitude) {
        this.latitude = latitude;
    }

    public Integer getLongtitude() {
        return longtitude;
    }

    public void setLongtitude(Integer longtitude) {
        this.longtitude = longtitude;
    }

    public Long getRouteId() {
        return routeId;
    }

    public void setRouteId(Long routeId) {
        this.routeId = routeId;
    }

    /** To-one relationship, resolved on first access. */
    public Route getRoute() {
        Long __key = this.routeId;
        if (route__resolvedKey == null || !route__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RouteDao targetDao = daoSession.getRouteDao();
            Route routeNew = targetDao.load(__key);
            synchronized (this) {
                route = routeNew;
            	route__resolvedKey = __key;
            }
        }
        return route;
    }

    public void setRoute(Route route) {
        synchronized (this) {
            this.route = route;
            routeId = route == null ? null : route.getId();
            route__resolvedKey = routeId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
